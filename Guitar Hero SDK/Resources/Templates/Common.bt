// Common colors

#define CL_MAGIC                        0xffcc00
#define CL_POINTER                      0xccffcc
#define CL_PADDING                      0x777777
#define CL_SINGLEVALUE                  0xbbbbff
#define CL_FLOATS                       0xdddddd
#define CL_COUNT                        0xaaddff
#define CL_NAME                         0xa5b2c8
#define CL_NAME_LENGTH                  0xb5c2d8
#define CL_CHECKSUM                     0xbbffff
#define CL_PARSED                       0xeeeeee
#define CL_IMPORTANT_BG                 0x333333
#define CL_IMPORTANT_FG                 0x8888ff

#define MESHFLAG_HASVERTEXCOLORS        1 << 4
#define MESHFLAG_HASWEIGHTS             1 << 7

// #include "NoteKeys.bt"

typedef enum <uint32> {

    gh_timesig = 0x2F2BA62D,
    gh_fretbar = 0xD64E050D,
    gh_markers = 0x98164A18,
    gh_vocals = 0x51BCD6FB,
    gh_vocallyrics = 0x54915EC2,
    gh_vocalphrase = 0xCD00D4A8,
    gh_vocalstarpower = 0x2CF0895A,
    gh_backup_vocals = 0x739F0A58,
    gh_backup_vocallyrics = 0x922D033C,
    gh_backup_vocalphrase = 0x0BBC8956,
    gh_backup_vocalstarpower = 0x5E680BF8,
    gh_guitarexpert = 0xAA005029,
    gh_guitarhard = 0xB8742FCA,
    gh_guitarmedium = 0x236886DC,
    gh_guitareasy = 0x3003AA8F,
    gh5_marker_note = 0x2741EDEA,
    gh5_star_note = 0x62D2B3E5,
    gh5_fretbar_note = 0x0D3BCED9,
    gh5_drumfill_note = 0x8B9A5E30,
    gh5_instrument_note = 0xB0C1E3B5,
    gh5_timesig_note = 0x18460409,
    gh5_band_moment_note = 0x54012FB6,
    gh5_vocal_lyric = 0x9930D36D,
    gh5_vocal_marker_note = 0xBE849F90,
    gh5_vocal_phrase = 0x630787DA,
    gh5_vocal_note = 0xD4CC2B84,
    gh5_vocal_freeform_note = 0x07EE4A5C,
    gh5_tapping_note = 0xBE5EFB47,
    gh6_expert_drum_note = 0xA1DA8586,

    note = 0x304205EB,
    perf = 0x424056AD,

    bandmoment = 0xBCA9255D,
    fretbar = 0xF02E6FDA,
    timesig = 0x094BCCFA,

    vocals = 0xE8E6ADCB,
    vocallyrics = 0x1DA27F4E,
    vocalsmarkers = 0x032292A7,
    vocalstarpower = 0xF7901F02,
    vocalphrase = 0x8433F524,
    vocalfreeform = 0xEA4C2823,

    guitarmarkers = 0x92511D84,

    easydrumfill = 0x25E33100,
    mediumdrumfill = 0x7A22D687,
    harddrumfill = 0x0901FEF6,
    expertdrumfill = 0x5DEBA502,

    drumsexpertinstrument = 0x85EC6691,
    drumshardinstrument = 0x47376ACF,
    drumsmediuminstrument = 0x0A140DD0,
    drumseasyinstrument = 0x0E0ADF37,
    bassexpertinstrument = 0x978F8759,
    basshardinstrument = 0xF49FD1AC,
    bassmediuminstrument = 0x1877EC18,
    basseasyinstrument = 0xBDA26454,
    guitarexpertinstrument = 0x01FE0E80,
    guitarhardinstrument = 0xD20139E4,
    guitarmediuminstrument = 0x8E0665C1,
    guitareasyinstrument = 0x9B3C8C1C,

    bassexperttapping = 0xAF3AAE86,
    basshardtapping = 0xFFA652B3,
    bassmediumtapping = 0x640881F7,
    basseasytapping = 0xC4F72F0D,
    guitarexperttapping = 0xE8E24AB6,
    guitarhardtapping = 0x64C94EA2,
    guitarmediumtapping = 0x23D065C7,
    guitareasytapping = 0x5F98331C,

    drumsexpertstarpower = 0x3B0F5CA2,
    drumshardstarpower = 0x37FCA51E,
    drumsmediumstarpower = 0xA6FAE27E,
    drumseasystarpower = 0x630E10F8,
    bassexpertstarpower = 0xEF07C4FB,
    basshardstarpower = 0xF93DE8E6,
    bassmediumstarpower = 0x72F27A27,
    basseasystarpower = 0xADCF5D00,
    guitarexpertstarpower = 0x972693B1,
    guitarhardstarpower = 0xBEE50CD6,
    guitarmediumstarpower = 0x0AD32D6D,
    guitareasystarpower = 0xEA17B930,

    // -----------------------

    SkinShader = 0x852105C8,
    SkinShader_VertexColor = 0xACD09A98,
    HairShader = 0x6F3F03F3,
    SkinShaderEnvMap = 0x96a8d9b5,
    D_S_3ChkBox_Pass0 = 0x67aa2ae2,
    D_3ChkBox_Pass0 = 0xE0AB9772,
    Flare = 0x379BED00,
    Flare_07 = 0x8C163D2B,

    // -----------------------

    DOT_img = 0xDAD5E950,
    DOT_qb = 0xA7F505C4,
    DOT_mqb = 0x4BC1E85E,
    DOT_sqb = 0x5D796624,
    DOT_nqb = 0x49875607,
    DOT_skin = 0x64112E85,
    DOT_tex = 0x8BFA5E8E,
    DOT_mdl = 0x9BCC234D,
    DOT_scn = 0x2C3B5ADC,
    DOT_last = 0x2CB3EF3B,
    DOT_col = 0x72A6D78C,
    DOT_geom = 0x7EA7357B,
    DOT_hkc = 0x8A20E0F8,
    DOT_ske = 0x7330095C,
    DOT_wav = 0x0A6808D4,
    DOT_table = 0x43904241,
    DOT_ska = 0x745DCD45,
    DOT_pfx = 0xA7DEA591,
    DOT_qs = 0xCD452536,
    DOT_qs_en = 0x4EF04440,
    DOT_qs_fr = 0x71DC4BCC,
    DOT_qs_it = 0x1F27F236,
    DOT_qs_de = 0xC039AC89,
    DOT_qs_es = 0x2DF62899,
    DOT_note = 0xA9D5BC8F,
    DOT_perf = 0xDBD7EFC9,
    DOT_en = 0x80ED9EBA,
    DOT_mcol = 0x6290993B,
    DOT_rnb = 0x91E1028D,
    DOT_stex = 0x2B0A3095,
    DOT_dbg = 0x559566CC,

    // -----------------------

    AutocutCameras = 0x22E0A112,
    MomentCameras = 0x0594D967,
    
    gh5_camera_note = 0x34FF8B0B,
    gh5_actor_loops = 0x0930B9AE,
    gh6_actor_loops = 0xB4FAD560,

    z_harbor_gfx_NodeArray = 0xB05C0CC2,
    z_harbor_gfx_FX_REncoreFlowers = 0x3ACDDF7F,
    z_harbor_GFX_FX_FlowerReflections = 0x691ED77A,
    Z_Harbor_GFX_FX_LongSparks = 0xD3387D7D,
    z_harbor_GFX_FX_HarborEncore_WheelFW = 0xEA4955A4,
    z_harbor_GFX_FX_HarborEncore_Flowers = 0x26C32FBE,
    z_harbor_GFX_FX_HarborEncore_Streamers = 0xE1DDEEAB,
    Z_Harbor_GFX_FX_Harbor_FrontFlowers = 0x97E37136,
    Z_Harbor_GFX_FX_Encore_Bursts01 = 0x56DB5877,
    Z_Harbor_GFX_FX_Encore_Bursts02 = 0xCFD209CD,
    Z_Harbor_GFX_FX_Encore_Bursts03 = 0xB8D5395B,
    Z_Harbor_GFX_FX_Encore_Bursts04 = 0x26B1ACF8,
    Z_Harbor_GFX_FX_EncoreGhost = 0x8DAB5B9B,
    Z_Harbor_GFX_FX_CitySmoke = 0xD978C67E,
    Z_Harbor_GFX_FX_Fireworks_Burst_Flower03 = 0x7A476767,
    Z_Harbor_GFX_FX_LampGlow = 0xA72239D5,
    Z_Harbor_GFX_FX_CrowdFog = 0xD549EA6D,
    
    l_sing_josh_joker_f_anims = 0x89B782DD,
    L_DRUM_Loops_Standard_anims = 0xE5C9F78E,
    l_guit_tara_4horsemen_f_anims = 0xB62B6D90,
    L_GUIT_Jeffs_LowKey_anims = 0x3D060E86,
    l_guit_ginger_joker_anims = 0xDFE16C9A,
    L_GUIT_Jeffs_LowKey_anims_set = 0x46A5CC40,
    L_GUIT_Tara_4horsemen_F_anims_set = 0x2306B13D,
    L_SING_josh_Joker_F_anims_set = 0x83544E6B,
    L_GUIT_ginger_joker_anims_set = 0x4802DD56,
    guitarist_finger_anims_car_female = 0x6396BABC,
    fret_anims_rocker = 0x465639F9,
    CAR_female_normal = 0x82072C14,
    CAR_male_normal = 0x3C198968,
    facial_anims_female_rocker = 0xE2F49717,
    facial_anims_male_rocker = 0xC60C7AC9,
    guit_jeff_lowkey_075_01 = 0x69023EF9,
    guit_jeff_lowkey_075_01_c01 = 0x84A4768D,
    guit_jeff_lowkey_075_01_c02 = 0x1DAD2737,
    guit_jeff_lowkey_075_01_c03 = 0x6AAA17A1,
    guit_sam_joker_075_01 = 0x8FF5B6A3,
    guit_sam_joker_075_01_c01 = 0xDDA6E344,
    guit_sam_joker_075_01_c02 = 0x44AFB2FE,
    guit_sam_joker_075_01_c03 = 0x33A88268,
    guit_tara_4horsemen_075 = 0x9142FE25,
    guit_tara_4horsemen_075_c01 = 0x3A96D3C7,
    L_GUIT_Ginger_Bulls_anims = 0x88F7E1A8,
    L_GUIT_ginger_bulls_anims_set = 0x125A142F,
    L_GUIT_Chris_Stillborn_F_anims = 0x53B86896,
    L_GUIT_Chris_Stillborn_F_anims_set = 0x8AAAE324,
    L_SING_Adam_Dammit_F_anims = 0x315C8816,
    L_SING_Adam_Dammit_F_anims_set = 0x57BFB323,
    L_SING_JeffS_LowKey_anims = 0x56B5B6AF,
    L_SING_JeffS_Lowkey_anims_set = 0x455AC6F7,
    L_SING_Adam_Dammit_anims = 0xFC7E8694,
    L_SING_Adam_Dammit_anims_set = 0x581618B4,
    guitarist_finger_anims_CAR_Male = 0xA70633E6,
    L_GUIT_Ginger_Bulls_M_anims = 0x937E2561,
    L_GUIT_Ginger_Bulls_M_anims_set = 0xEF9D61D1,
    L_GUIT_Chris_Stillborn_anims = 0x02921877,
    L_GUIT_Chris_Stillborn_anims_set = 0xC39F0063,
    tr_percent100 = 0x5B37F1F6,
    bestscore = 0x4AE0A981,
    tr_stars = 0xF3D7F3ED,
    Score = 0xCD66C8AE,
    
    SK6_BA_FliesOnShit = 0x308CD397,
    
    Control_Root = 0x1BE55811,
    Bone_Pelvis = 0x63540A6D,
    Bone_Stomach_Lower = 0x897B494B,
    Bone_Stomach_Upper = 0xE9BEEDF4,
    Bone_Chest = 0x96EC22F2,
    Bone_Collar_L = 0xF1C35735,
    Bone_Bicep_L = 0x1ADDB5F1,
    Bone_Forearm_L = 0x9BBB8DDD,
    Bone_Palm_L = 0x82B37CBC,
    Bone_Collar_R = 0x0BCC6A56,
    Bone_Shoulder_R = 0x31007335
} NOTE_QBKEY <format=hex>;

string ReadNoteQBKey(NOTE_QBKEY &key)
{
    return EnumToString(key);
}

typedef struct (int start_value)
{
    local int start_value = start_value;
    int offset;
} RelativeOffset <read=ReadRelativeOffset>;

int AbsOffset(RelativeOffset &off)
{
    return off.start_value + off.offset;
}

string ReadRelativeOffset(RelativeOffset &off)
{
    if (off.offset < 0)
        return Str("%d", off.offset);

    return Str("%d", AbsOffset(off));
}

int SnapAmount(int a, int snap_value)
{
    local int extra = a % snap_value;

    if (extra > 0)
        return (snap_value - extra);

    return 0;
}

int SnappedNumber(int a, int snap_value)
{
    local int am = SnapAmount(a, snap_value);
    if (am > 0)
        return a + am;

    return a;
}

void SkipTo(int snap_value)
{
    local int skip_amount = SnapAmount(FTell(), snap_value);
    if (skip_amount > 0)
        FSkip(skip_amount);
}

typedef struct
{
    int values[3];
} Int3 <read=ReadInt3>;

typedef struct
{
    int values[4];
} Int4 <read=ReadInt4>;

typedef struct
{
    float values[2];
} Vec2 <read=ReadVec2>;

typedef struct
{
    float values[3];
} Vec3 <read=ReadVec3>;

typedef struct
{
    float values[4];
} Vec4 <read=ReadVec4>;

typedef struct
{
    Vec4 m_min;
    Vec4 m_max;
} CBBox <read=ReadCBBox>;

typedef struct
{
    Vec3 m_min;
    Vec3 m_max;
} CBBox_Small <read=ReadCBBox_Small>;

typedef struct
{
    Vec3 position;
    float radius;
} Sphere <read=ReadSphere>;

typedef struct
{
    NOTE_QBKEY checksum;
} QBKey <read=ReadQBKey>;

ubyte ChecksumEquals(QBKey &a, uint b)
{
    if (a.checksum == b)
        return true;

    return false;
}

string ReadQBKey(QBKey &key)
{
    local string s;
    local NOTE_QBKEY noteKey;

    string readKey = ReadNoteQBKey(key.checksum);
    
    if (readKey != "")
        return readKey;

    return Str("0x%08x", key.checksum);
}

string ReadVec2(Vec2 &vec)
{
    return Str("(%f, %f)", vec.values[0], vec.values[1]);
}

string ReadVec3(Vec3 &vec)
{
    return Str("(%f, %f, %f)", vec.values[0], vec.values[1], vec.values[2]);
}

string ReadVec4(Vec4 &vec)
{
    return Str("(%f, %f, %f, %f)", vec.values[0], vec.values[1], vec.values[2], vec.values[3]);
}

string ReadCBBox(CBBox &box)
{
    return Str("%s, %s", ReadVec4(box.m_min), ReadVec4(box.m_max));
}

string ReadCBBox_Small(CBBox_Small &box)
{
    return Str("%s, %s", ReadVec3(box.m_min), ReadVec3(box.m_max));
}

string ReadInt3(Int3 &num)
{
    local string s;
    return SPrintf(s, "(%d, %d, %d)", num.values[0], num.values[1], num.values[2]);
}

string ReadInt4(Int4 &num)
{
    local string s;
    return SPrintf(s, "(%d, %d, %d, %d)", num.values[0], num.values[1], num.values[2], num.values[3]);
}

string ReadSphere(Sphere &vec)
{
    local string s;
    return SPrintf(s, "(%f, %f, %f), %f", vec.position.values[0], vec.position.values[1], vec.position.values[2], vec.radius);
}

int Vec4ToColor(float r, float g, float b, float a)
{
    local int r_int = Min(255, Floor(255 * (r / 1.0)));
    local int g_int = Min(255, Floor(255 * (g / 1.0)));
    local int b_int = Min(255, Floor(255 * (b / 1.0)));

    g_int = g_int << 8;
    b_int = b_int << 16;

    return r_int + g_int + b_int;
}

typedef struct
{
    uint count <bgcolor=CL_NAME_LENGTH>;
    
    if (count > 0)
        char text[count] <bgcolor=CL_NAME, optimize=false>;
} NumString<read=Str("%s", count > 0 ? text : "")>;

string NumStringStr(NumString &ns)
{
    return (ns.count > 0) ? ns.text : "";
}

// Count, followed by pointers

typedef struct
{
    short count <bgcolor=CL_COUNT>;
    short null <bgcolor=CL_PADDING>;

    int pointers[count] <bgcolor=CL_POINTER>;
} Count <read=ReadCount>;

string ReadCount(Count &count)
{
    local string s;
    return SPrintf(s, "%d object(s)", count.count);
}

typedef struct
{
    string charlist <bgcolor=CL_NAME>;

} TermString <read=ReadTermString>;

string ReadTermString(TermString &str)
{
    return str.charlist;
}

// -------------------

typedef struct
{
    wstring charlist <bgcolor=CL_NAME>;
} TermWString <read=ReadTermWString>;

string ReadTermWString(TermWString &str)
{
    return str.charlist;
}

// -------------------

string PeekTermString()
{
    local uint old_off = FTell();
    local string str = "";
    local ubyte chr = ReadUByte();

    while (chr != 0x00)
    {
        SPrintf(str, "%s%d", str, chr);
        FSeek(FTell() + 1);
        chr = ReadUByte();
    }

    FSeek(old_off);

    return str;
}

typedef struct
{
    RelativeOffset name_offset(0);
    local int old_off = FTell();
    FSeek(AbsOffset(name_offset));
    TermString name;
    FSeek(old_off);
} NamePointer <read=ReadNamePointer>;

string ReadNamePointer(NamePointer &ptr)
{
    return ReadTermString(ptr.name);
}

typedef struct
{
    Vec4 a;
    Vec4 b;
    Vec4 c;
    Vec4 d;
} Matrix_4x4;