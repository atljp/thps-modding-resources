// Actual object / mesh

typedef struct (int scene_start)
{
    Sphere bounding_sphere <bgcolor=CL_MESHFLOATS>;
    RelativeOffset uv_start(scene_start) <bgcolor=CL_MESHPOINTER>;

    byte ff_a[8] <hidden=true, bgcolor=CL_MESHPADDING>;

    int uv_length <bgcolor=CL_MESHVALUE, comment="Length of pure vert UV's">;

    byte null_a[4] <hidden=true, bgcolor=CL_MESHPADDING>;

    uint mesh_flags <bgcolor=CL_MESHVALUE>;

    ubyte uv_unk[2] <bgcolor=CL_MESHPADDING>;
    ubyte uv_bool <bgcolor=CL_MESHVALUE>;
    ubyte uv_stride <bgcolor=CL_MESHVALUE>;

    ushort unk_a[2] <bgcolor=CL_MESHVALUE>;

    byte null_b[4] <hidden=true, bgcolor=CL_MESHPADDING>;

    QBKey material <bgcolor=CL_MESHCHECKSUM>;

    byte null_c[4] <hidden=true, bgcolor=CL_MESHPADDING>;
    int always_255 <bgcolor=CL_MESHVALUE>;
    byte null_d[4] <hidden=true, bgcolor=CL_MESHPADDING>;

    ushort face_count <bgcolor=CL_MESHVALUE>;
    ushort vertex_count <bgcolor=CL_MESHVALUE>;

    byte null_e[8] <hidden=true, bgcolor=CL_MESHPADDING>;

    uint unkFlags <bgcolor=CL_MESHVALUE>;

    byte null_f[4] <hidden=true, bgcolor=CL_MESHPADDING>;

    RelativeOffset face_start(scene_start) <bgcolor=CL_MESHPOINTER>;
    RelativeOffset vert_start(scene_start) <bgcolor=CL_MESHPOINTER>;

    byte null_g[4] <hidden=true, bgcolor=CL_MESHPADDING>;

    int face_num <bgcolor=CL_MESHVALUE, comment="Face type? usually 4">;

    byte null_h[8] <hidden=true, bgcolor=CL_MESHPADDING>;

    // Read geometry data
    local int old_off = FTell();

    // UV's
    if (uv_start.offset > 0)
    {
        FSeek(AbsOffset(uv_start));
            UVBlock uvs(vertex_count, uv_stride, mesh_flags);
    }

    // Vertices (SubMesh Cafe)
    // Unweighted meshes have values in the UV block
    if (mesh_flags & MESHFLAG_HASWEIGHTS)
    {
        if (vert_start.offset > 0)
        {
            FSeek(AbsOffset(vert_start));
                VertexBlock vertices(vertex_count, mesh_flags, false);
        }
    }

    // Faces
    if (face_start.offset > 0)
    {
        FSeek(AbsOffset(face_start));
            FaceBlock faces(face_count);
    }

    // Return
    FSeek(old_off);
} sMesh <read=ReadsMesh>;

string ReadsMesh(sMesh &themesh)
{
    local string s;

    return SPrintf(s, "Mat: %s, [%x], %d verts, %d faces, %d UVstride", ReadQBKey(themesh.material), themesh.unkFlags, themesh.vertex_count, themesh.face_count, themesh.uv_stride);
}