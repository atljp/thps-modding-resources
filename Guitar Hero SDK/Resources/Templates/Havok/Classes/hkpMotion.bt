enum <ubyte> MotionType
{
		/// 
	MOTION_INVALID,

		/// A fully-simulated, movable rigid body. At construction time the engine checks
		/// the input inertia and selects MOTION_SPHERE_INERTIA or MOTION_BOX_INERTIA as
		/// appropriate.
	MOTION_DYNAMIC,

		/// Simulation is performed using a sphere inertia tensor. (A multiple of the
		/// Identity matrix). The highest value of the diagonal of the rigid body's
		/// inertia tensor is used as the spherical inertia.
	MOTION_SPHERE_INERTIA,

		/// This is the same as MOTION_SPHERE_INERTIA, except that simulation of the rigid
		/// body is "softened", which produces more stable results in large constrained
		/// systems.
	MOTION_STABILIZED_SPHERE_INERTIA,

		/// Simulation is performed using a box inertia tensor. The non-diagonal elements
		/// of the inertia tensor are set to zero. This is slower than the
		/// MOTION_SPHERE_INERTIA motions, however it can produce more accurate results,
		/// especially for long thin objects.
	MOTION_BOX_INERTIA,

		/// This is the same as MOTION_BOX_INERTIA, except that simulation of 	the rigid
		/// body is "softened", which produces more stable results in large constrained
		/// systems.

	MOTION_STABILIZED_BOX_INERTIA,
		/// Simulation is not performed as a normal rigid body. During a simulation step,
		/// the velocity of the rigid body is used to calculate the new position of the
		/// rigid body, however the velocity is NOT updated. The user can keyframe a rigid
		/// body by setting the velocity of the rigid body to produce the desired keyframe
		/// positions. The hkpKeyFrameUtility class can be used to simply apply keyframes
		/// in this way. The velocity of a keyframed rigid body is NOT changed by the
		/// application of impulses or forces. The keyframed rigid body has an infinite
		/// mass when viewed by the rest of the system.
	MOTION_KEYFRAMED,

		/// This motion type is used for the static elements of a game scene, e.g. the
		/// landscape. Fixed rigid bodies are treated in a special way by the system. They
		/// have the same effect as a rigid body with a motion of type MOTION_KEYFRAMED
		/// and velocity 0, however they are much faster to use, incurring no simulation
		/// overhead, except in collision with moving bodies.
	MOTION_FIXED,

		/// A box inertia motion which is optimized for thin boxes and has less stability problems
	MOTION_THIN_BOX_INERTIA,

		/// A specialized motion used for character controllers
		/// Not currently used
	MOTION_CHARACTER,

		/// 
	MOTION_MAX_ID
};

typedef struct
{
    hkReferencedObject super;
    MotionType m_type;
    hkUint8 m_deactivationIntegrateCounter;
    hkUint16 m_deactivationNumInactiveFrames[2] <optimize=false>;
    hkMotionState m_motionState;
    hkVector4 m_inertiaAndMassInv;
    hkVector4 m_linearVelocity;
    hkVector4 m_angularVelocity;
    hkVector4 m_deactivationRefPosition[2] <optimize=false>;
    hkUint32 m_deactivationRefOrientation[2] <optimize=false>;
    OptionalLinkMarker m_savedMotion;
    hkUint16 m_savedQualityTypeIndex;

    // Scale the world gravity to disable gravity or reverse the direction
    if (HAVOK_VERSION > 5)
        hkHalf m_gravityFactor;

} hkpMotion <read=EnumToString(m_type)>;