#include "../Common.bt"

LittleEndian();

#define EXT_LAST            0x2CB3EF3B
#define EXT_LAST_HAWK       0xB524565F

// Pak file header
typedef struct
{
    local int header_start = FTell();

    QBKey magic <bgcolor=CL_CHECKSUM, name="Extension">;
    RelativeOffset start(header_start) <bgcolor=CL_POINTER, name="Start Offset">;

    uint size <bgcolor=CL_SINGLEVALUE, name="Filesize">;
    QBKey fullName <bgcolor=CL_CHECKSUM, name="Full Name Checksum", comment="Path with platform extension!">;
    QBKey nameOnly <bgcolor=CL_CHECKSUM, name="Name (No Extension)", comment="Usually 0 in THAW">; 
    QBKey pak_name <bgcolor=CL_CHECKSUM, name="Pak Checksum", comment="Usually 0 in THAW">;

    local int file_ref = ReadUInt();
    if (file_ref != 0)
        QBKey fileReference <bgcolor=CL_CHECKSUM, name="File Reference", comment="Usually .tex file">;
    else
        QBKey fileReference <bgcolor=CL_PARSED, name="File Reference", comment="Usually .tex file">;

    uint flags <bgcolor=CL_FLOATS, name="Flags">;

    // Filename is in header!
    if (flags & 0x20)
    {
        char filename[160] <name="Filename", bgcolor=CL_NAME>;
    }

    local int oldOff = FTell();
    FSeek(AbsOffset(start));
    // byte data[size] <bgcolor=CL_PADDING, name="Data">;
    FSeek(oldOff);
} PakHeader <read=ReadPakHeader>;

string ReadPakHeader(PakHeader &header)
{
    local string s;
    return SPrintf(s, "[0x%02x] [%s] Start: %d (0x%x), Size: %d %s", header.flags, ReadQBKey(header.magic), AbsOffset(header.start), AbsOffset(header.start), header.size, (header.flags & 0x20) ? header.filename : "");
}

local int magic = ReadUInt();
local int fileCount = 0;

while (magic != EXT_LAST && magic != EXT_LAST_HAWK && !FEof())
{
    PakHeader file;
    fileCount ++;
    magic = ReadUInt();
}

PakHeader file;
fileCount ++;